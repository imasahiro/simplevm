#!ruby

class OP
  attr_accessor :opcode, :name, :arg
  def initialize(opcode, name, arg)
    @opcode = opcode
    @name = name
    @arg = []
    if arg != nil
        parse_arg(arg)
    end
  end

  def parse_arg(arg)
    arg.split(",").map(&:strip).map { |e|
      a = e.split(":")
      @arg.push(*a)
    }
  end
end


irs = []
open("./src/pegvm.def") {|f|
    i = 0
    while l = f.gets
        if /^\(([a-zA-Z0-9_]+)/ =~ l
            /^\(([a-zA-Z0-9_]+) *(, *[a-zA-Z]+:[a-zA-Z]+)?\)$/ =~ l
            # puts "OPCODE=#{i} OP=#{$1}, ARG=#{$2}"
            irs.push OP.new(i, $1, $2)
            i += 1
        end
    end
}

puts "// This file is auto generated by src/codegen.rb"
puts "// DO NOT TOUCH!"
puts ""
puts "// If you want to fix something, you must edit 'pegvm.def'"
puts "// and execute `ruby src/codegen.rb > src/loader.generated.c`"

irs.each {|ir|
    puts "static Instruction *Emit_#{ir.name}(Instruction *self, uint32_t ndata, ARRAY(uint8_t) *bdata)"
    puts "{"
    if ir.arg.length > 0
        if ir.arg[1] == "char" || ir.arg[1] == "target" || ir.arg[1] == "offset"
            puts "    self->ndata = ndata;"
        elsif ir.arg[1] == "text"
            puts "    self->#{ir.arg[0]} = pegvm_string_copy(bdata);"
        elsif ir.arg[1] == "charset"
            puts "    self->#{ir.arg[0]} = pegvm_make_charset(bdata);"
        end
    end
    puts "    return self;"
    puts "}"
    puts "static void Dump_#{ir.name}(Instruction *self)"
    puts "{"
    puts "    fprintf(stderr, \"[%p] #{ir.name} \", self);"
    if ir.arg.length > 0
       if ir.arg[1] == "char"
           puts "    fprintf(stderr, \"#{ir.arg[1]}=%c\", (char)self->ndata);"
       elsif ir.arg[1] == "target"
           puts "    fprintf(stderr, \"#{ir.arg[1]}=%p\", self->dst);"
       elsif ir.arg[1] == "text"
           puts "    fprintf(stderr, \"#{ir.arg[1]}='%s'\", (char *)self->bdata);"
       elsif ir.arg[1] == "charset"
           puts "    fprintf(stderr, \"#{ir.arg[1]}='%s'\", pegvm_dump_charset(self->bdata));"
       end
    end
    puts "    fprintf(stderr, \"\\n\");"
    puts "}"

}
